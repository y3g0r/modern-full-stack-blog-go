openapi: 3.0.3
info:
  title: Modern full stack blog
  description: Go backend for Blog API from "Modern Full-Stack React Projects" book by Daniel Bugl, 2024.
  version: 0.0.1
paths:
  /api/v1/posts:
    get:
      summary: Get all posts
      operationId: getPosts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      operationId: createPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                required:
                  - id
  /api/v1/posts/{id}:
    get:
      summary: Get a post by ID
      operationId: getPost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    patch:
      summary: Update a post by ID
      operationId: updatePost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      summary: Delete a post by ID
      operationId: deletePost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
  /api/v1/jams:
    get:
      summary: Get all jams
      operationId: getJams
      responses:
        '401':
          description: Unauthorized
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Jam'
    post:
      summary: Create a new jam
      operationId: Create jam
      requestBody:
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/CreateJamRequest'
      responses:
        "401":
          description: Unauthorized
        "201":
          description: Created
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    format: int64
                required:
                  - id
components:
  schemas:
    Post:
      type: object
      required:
        - title
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        author:
          type: string
          readOnly: true
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Participant:
      type: object
      properties:
        email:
          type: string
        response:
          type: string
          description: indicates whether or not invite was accepted or declined. When participant hasn't responded yet the field is not present.
          readOnly: true
          enum:
            - accepted
            - decline
      required:
        - email
    Jam:
      type: object
      required: 
        - id
        - createdBy
        - name
        - startTimestampSeconds
        - endTimestampSeconds
        - location
        - participants
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        startTimestampSeconds:
          type: integer
          format: int64
        endTimestampSeconds:
          type: integer
          format: int64
        location:
          type: string
        createdBy:
          type: string
        participants:
          type: array
          items:
            $ref: "#/components/schemas/Participant"
    CreateJamRequest:
      type: object
      required: 
        - name
        - startTimestampSeconds
        - endTimestampSeconds
        - location
        - participants
      properties:
        name:
          type: string
        startTimestampSeconds:
          type: integer
          format: int64
        endTimestampSeconds:
          type: integer
          format: int64
        location:
          type: string
        participants:
          type: array
          items:
            $ref: "#/components/schemas/Participant"
