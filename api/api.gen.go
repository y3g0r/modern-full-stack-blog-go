// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for JamInviteResponse.
const (
	Accepted JamInviteResponse = "accepted"
	Declined JamInviteResponse = "declined"
)

// CreateJamRequest defines model for CreateJamRequest.
type CreateJamRequest struct {
	EndTimestampSeconds   int64         `json:"endTimestampSeconds"`
	Location              string        `json:"location"`
	Name                  string        `json:"name"`
	Participants          []Participant `json:"participants"`
	StartTimestampSeconds int64         `json:"startTimestampSeconds"`
}

// Jam defines model for Jam.
type Jam struct {
	CreatedBy             string        `json:"createdBy"`
	EndTimestampSeconds   int64         `json:"endTimestampSeconds"`
	Id                    int64         `json:"id"`
	Location              string        `json:"location"`
	Name                  string        `json:"name"`
	Participants          []Participant `json:"participants"`
	StartTimestampSeconds int64         `json:"startTimestampSeconds"`
}

// JamInviteResponse indicates whether or not invite was accepted or declined. When participant hasn't responded yet the field is not present.
type JamInviteResponse string

// Participant defines model for Participant.
type Participant struct {
	Email string `json:"email"`

	// Response indicates whether or not invite was accepted or declined. When participant hasn't responded yet the field is not present.
	Response *JamInviteResponse `json:"response,omitempty"`
}

// Post defines model for Post.
type Post struct {
	Author    *string    `json:"author,omitempty"`
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Tags      *[]string  `json:"tags,omitempty"`
	Title     string     `json:"title"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// RespondToJamInviteJSONBody defines parameters for RespondToJamInvite.
type RespondToJamInviteJSONBody struct {
	// Response indicates whether or not invite was accepted or declined. When participant hasn't responded yet the field is not present.
	Response JamInviteResponse `json:"response"`
}

// CreateJamJSONRequestBody defines body for CreateJam for application/json ContentType.
type CreateJamJSONRequestBody = CreateJamRequest

// RespondToJamInviteJSONRequestBody defines body for RespondToJamInvite for application/json ContentType.
type RespondToJamInviteJSONRequestBody RespondToJamInviteJSONBody

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = Post

// UpdatePostJSONRequestBody defines body for UpdatePost for application/json ContentType.
type UpdatePostJSONRequestBody = Post

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all jams
	// (GET /api/v1/jams)
	GetJams(w http.ResponseWriter, r *http.Request)
	// Create a new jam
	// (POST /api/v1/jams)
	CreateJam(w http.ResponseWriter, r *http.Request)
	// Respond to jam invite
	// (PATCH /api/v1/jams/{id}/invite)
	RespondToJamInvite(w http.ResponseWriter, r *http.Request, id int)
	// Get all posts
	// (GET /api/v1/posts)
	GetPosts(w http.ResponseWriter, r *http.Request)
	// Create a new post
	// (POST /api/v1/posts)
	CreatePost(w http.ResponseWriter, r *http.Request)
	// Delete a post by ID
	// (DELETE /api/v1/posts/{id})
	DeletePost(w http.ResponseWriter, r *http.Request, id int)
	// Get a post by ID
	// (GET /api/v1/posts/{id})
	GetPost(w http.ResponseWriter, r *http.Request, id int)
	// Update a post by ID
	// (PATCH /api/v1/posts/{id})
	UpdatePost(w http.ResponseWriter, r *http.Request, id int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all jams
// (GET /api/v1/jams)
func (_ Unimplemented) GetJams(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new jam
// (POST /api/v1/jams)
func (_ Unimplemented) CreateJam(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Respond to jam invite
// (PATCH /api/v1/jams/{id}/invite)
func (_ Unimplemented) RespondToJamInvite(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all posts
// (GET /api/v1/posts)
func (_ Unimplemented) GetPosts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new post
// (POST /api/v1/posts)
func (_ Unimplemented) CreatePost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a post by ID
// (DELETE /api/v1/posts/{id})
func (_ Unimplemented) DeletePost(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a post by ID
// (GET /api/v1/posts/{id})
func (_ Unimplemented) GetPost(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a post by ID
// (PATCH /api/v1/posts/{id})
func (_ Unimplemented) UpdatePost(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetJams operation middleware
func (siw *ServerInterfaceWrapper) GetJams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJams(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateJam operation middleware
func (siw *ServerInterfaceWrapper) CreateJam(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateJam(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RespondToJamInvite operation middleware
func (siw *ServerInterfaceWrapper) RespondToJamInvite(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RespondToJamInvite(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPosts(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePost operation middleware
func (siw *ServerInterfaceWrapper) CreatePost(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePost(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePost(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPost operation middleware
func (siw *ServerInterfaceWrapper) GetPost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPost(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePost operation middleware
func (siw *ServerInterfaceWrapper) UpdatePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePost(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/jams", wrapper.GetJams)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/jams", wrapper.CreateJam)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/jams/{id}/invite", wrapper.RespondToJamInvite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/posts", wrapper.GetPosts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/posts", wrapper.CreatePost)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/posts/{id}", wrapper.DeletePost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/posts/{id}", wrapper.GetPost)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/posts/{id}", wrapper.UpdatePost)
	})

	return r
}

type GetJamsRequestObject struct {
}

type GetJamsResponseObject interface {
	VisitGetJamsResponse(w http.ResponseWriter) error
}

type GetJams200JSONResponse []Jam

func (response GetJams200JSONResponse) VisitGetJamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJams401Response struct {
}

func (response GetJams401Response) VisitGetJamsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateJamRequestObject struct {
	Body *CreateJamJSONRequestBody
}

type CreateJamResponseObject interface {
	VisitCreateJamResponse(w http.ResponseWriter) error
}

type CreateJam201JSONResponse struct {
	Id int64 `json:"id"`
}

func (response CreateJam201JSONResponse) VisitCreateJamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateJam401Response struct {
}

func (response CreateJam401Response) VisitCreateJamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RespondToJamInviteRequestObject struct {
	Id   int `json:"id"`
	Body *RespondToJamInviteJSONRequestBody
}

type RespondToJamInviteResponseObject interface {
	VisitRespondToJamInviteResponse(w http.ResponseWriter) error
}

type RespondToJamInvite204Response struct {
}

func (response RespondToJamInvite204Response) VisitRespondToJamInviteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RespondToJamInvite401Response struct {
}

func (response RespondToJamInvite401Response) VisitRespondToJamInviteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPostsRequestObject struct {
}

type GetPostsResponseObject interface {
	VisitGetPostsResponse(w http.ResponseWriter) error
}

type GetPosts200JSONResponse []Post

func (response GetPosts200JSONResponse) VisitGetPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePostRequestObject struct {
	Body *CreatePostJSONRequestBody
}

type CreatePostResponseObject interface {
	VisitCreatePostResponse(w http.ResponseWriter) error
}

type CreatePost201JSONResponse struct {
	Id int `json:"id"`
}

func (response CreatePost201JSONResponse) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeletePostRequestObject struct {
	Id int `json:"id"`
}

type DeletePostResponseObject interface {
	VisitDeletePostResponse(w http.ResponseWriter) error
}

type DeletePost204Response struct {
}

func (response DeletePost204Response) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetPostRequestObject struct {
	Id int `json:"id"`
}

type GetPostResponseObject interface {
	VisitGetPostResponse(w http.ResponseWriter) error
}

type GetPost200JSONResponse Post

func (response GetPost200JSONResponse) VisitGetPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePostRequestObject struct {
	Id   int `json:"id"`
	Body *UpdatePostJSONRequestBody
}

type UpdatePostResponseObject interface {
	VisitUpdatePostResponse(w http.ResponseWriter) error
}

type UpdatePost200JSONResponse Post

func (response UpdatePost200JSONResponse) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all jams
	// (GET /api/v1/jams)
	GetJams(ctx context.Context, request GetJamsRequestObject) (GetJamsResponseObject, error)
	// Create a new jam
	// (POST /api/v1/jams)
	CreateJam(ctx context.Context, request CreateJamRequestObject) (CreateJamResponseObject, error)
	// Respond to jam invite
	// (PATCH /api/v1/jams/{id}/invite)
	RespondToJamInvite(ctx context.Context, request RespondToJamInviteRequestObject) (RespondToJamInviteResponseObject, error)
	// Get all posts
	// (GET /api/v1/posts)
	GetPosts(ctx context.Context, request GetPostsRequestObject) (GetPostsResponseObject, error)
	// Create a new post
	// (POST /api/v1/posts)
	CreatePost(ctx context.Context, request CreatePostRequestObject) (CreatePostResponseObject, error)
	// Delete a post by ID
	// (DELETE /api/v1/posts/{id})
	DeletePost(ctx context.Context, request DeletePostRequestObject) (DeletePostResponseObject, error)
	// Get a post by ID
	// (GET /api/v1/posts/{id})
	GetPost(ctx context.Context, request GetPostRequestObject) (GetPostResponseObject, error)
	// Update a post by ID
	// (PATCH /api/v1/posts/{id})
	UpdatePost(ctx context.Context, request UpdatePostRequestObject) (UpdatePostResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetJams operation middleware
func (sh *strictHandler) GetJams(w http.ResponseWriter, r *http.Request) {
	var request GetJamsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJams(ctx, request.(GetJamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJamsResponseObject); ok {
		if err := validResponse.VisitGetJamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateJam operation middleware
func (sh *strictHandler) CreateJam(w http.ResponseWriter, r *http.Request) {
	var request CreateJamRequestObject

	var body CreateJamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateJam(ctx, request.(CreateJamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateJam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateJamResponseObject); ok {
		if err := validResponse.VisitCreateJamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RespondToJamInvite operation middleware
func (sh *strictHandler) RespondToJamInvite(w http.ResponseWriter, r *http.Request, id int) {
	var request RespondToJamInviteRequestObject

	request.Id = id

	var body RespondToJamInviteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RespondToJamInvite(ctx, request.(RespondToJamInviteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RespondToJamInvite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RespondToJamInviteResponseObject); ok {
		if err := validResponse.VisitRespondToJamInviteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPosts operation middleware
func (sh *strictHandler) GetPosts(w http.ResponseWriter, r *http.Request) {
	var request GetPostsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPosts(ctx, request.(GetPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPosts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostsResponseObject); ok {
		if err := validResponse.VisitGetPostsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePost operation middleware
func (sh *strictHandler) CreatePost(w http.ResponseWriter, r *http.Request) {
	var request CreatePostRequestObject

	var body CreatePostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePost(ctx, request.(CreatePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePostResponseObject); ok {
		if err := validResponse.VisitCreatePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePost operation middleware
func (sh *strictHandler) DeletePost(w http.ResponseWriter, r *http.Request, id int) {
	var request DeletePostRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePost(ctx, request.(DeletePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePostResponseObject); ok {
		if err := validResponse.VisitDeletePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPost operation middleware
func (sh *strictHandler) GetPost(w http.ResponseWriter, r *http.Request, id int) {
	var request GetPostRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPost(ctx, request.(GetPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostResponseObject); ok {
		if err := validResponse.VisitGetPostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePost operation middleware
func (sh *strictHandler) UpdatePost(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdatePostRequestObject

	request.Id = id

	var body UpdatePostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePost(ctx, request.(UpdatePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePostResponseObject); ok {
		if err := validResponse.VisitUpdatePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTXPbNhD9KztoZ3phJNnx9KBbHE87dqeNx0mmh8SHFbESYYMAAiztUT367x0AtCWK",
	"9JdaO4fcKAJc4L19761uRGlrZw0ZDmJ6I0JZUY3p8b0nZDrB+oy+NRQ4vnPeOvKsKO0gIz+pmgJj7T5S",
	"aY1Mr+fW18hiKpThXw9EIXjpKP+kBXmxKoS2JbKyJm5vVwN7ZRZx0WBNgwsOPatSOWwvq5jq9PCzp7mY",
	"ip/GazDjFsn4dP1RrNEWRe9xGX8HRs87oVgVwtO3RnmSYvol3/q+esUgVxs8bIE7vzvOzi6oTDc/wbrf",
	"gjI1SR4uBwnbvUFK/ridVFIUG8QWr9LaY3OlmM4oOGtCIk1SKL1ymVyhjFQlMgW4rogr8mA9GMug0odw",
	"jQGwLMkxybgkqdTKkBzB3xUZ2LgCVBjMLww+nSVJwpIYuCKYK9ISVEh1nadAhkcJYFNHYm7ri0Lclt+A",
	"s+7uZqP6oVGj0oOi8BvgH9JBn63tDuYzhpg+tUNBhg1X1scnTyg/GL0UU/YNDWArrWHKuPprWTPvuKM6",
	"iUxvWCUJ9T7JPuvbinHRNUbvy235s2I9bLbGyedda4vNXLnPZtynzNz2xfq7hRmWl2QkzK2HQ20X8O70",
	"GObe1vBV/GkleQO/NVq/+chYXsIZYclw6m2sHL4KmFl7CbMlHKFRpOGwWegC9if7B1GPLdTbOvNGawip",
	"zkzbhSjEFfmQbzIZTUZ7kQTryKBTYirejiajt8mVXCVqx+jU+GpvfIGZ6gUlpqJAkoOPZYREfBLX1zJN",
	"e/cnkxTDa1Wgc1pl648vQg7GrNwnB11M+l6HI9tdlj/8EXcdTPb6DfhssqTVPyRTP0NT1+iXGQig1pDQ",
	"xihuHdGFezf8RdYCBT60cvksrA9B7P25WHVVF9236nG996zzux5/4kTrz4LzAerz9eUu/OdPAcHQdWxC",
	"Wt6U4PhGydU4x3qCgVxW/Q7l8JOf7F0c5kmDNTH5IKZfboSKd4k6vx1i0zzcujwXG5z16Djfvf9d/v+/",
	"dL+rNBxJj4nooN+u3ZzUdgDYxj62g7jTzuitByPlNG14jUxJg++JoTKYFxnLI4GRTnmZxMgAXicl/mMo",
	"3O93l0FsKSQ5PktPUzZ9l9yj9L4l94U8/phH/rLwvuW0CzBfDjCBizP7+CjK5CHJvxKKyQuI7ylu2WLi",
	"ngD/nP6WvSwd39OG34H9TOlWA1ar1b8BAAD//y4u0lHmEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
