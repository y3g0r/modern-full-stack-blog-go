// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJam = `-- name: CreateJam :one
INSERT INTO jams (
    created_by, -- 1
    name, -- 2
    start_timestamp, -- 3
    end_timestamp, -- 4
    location -- 5
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, created_by, name, start_timestamp, end_timestamp, location
`

type CreateJamParams struct {
	CreatedBy      pgtype.Text
	Name           pgtype.Text
	StartTimestamp pgtype.Timestamp
	EndTimestamp   pgtype.Timestamp
	Location       pgtype.Text
}

func (q *Queries) CreateJam(ctx context.Context, arg CreateJamParams) (Jam, error) {
	row := q.db.QueryRow(ctx, createJam,
		arg.CreatedBy,
		arg.Name,
		arg.StartTimestamp,
		arg.EndTimestamp,
		arg.Location,
	)
	var i Jam
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.Name,
		&i.StartTimestamp,
		&i.EndTimestamp,
		&i.Location,
	)
	return i, err
}

const createJamParticipant = `-- name: CreateJamParticipant :one
INSERT INTO jam_participants (
    email,
    jam_id
) VALUES (
    $1,
    $2
)
RETURNING id, email, jam_id
`

type CreateJamParticipantParams struct {
	Email pgtype.Text
	JamID pgtype.Int4
}

func (q *Queries) CreateJamParticipant(ctx context.Context, arg CreateJamParticipantParams) (JamParticipant, error) {
	row := q.db.QueryRow(ctx, createJamParticipant, arg.Email, arg.JamID)
	var i JamParticipant
	err := row.Scan(&i.ID, &i.Email, &i.JamID)
	return i, err
}

const getJamIdsByParticipantEmail = `-- name: GetJamIdsByParticipantEmail :many
SELECT j.id
FROM jams j
JOIN jam_participants p ON p.jam_id = j.id
WHERE p.email = $1
`

func (q *Queries) GetJamIdsByParticipantEmail(ctx context.Context, email pgtype.Text) ([]int32, error) {
	rows, err := q.db.Query(ctx, getJamIdsByParticipantEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJamsByIDs = `-- name: GetJamsByIDs :many
SELECT 
    j.id, 
    j.created_by, 
    j.name, 
    j.start_timestamp, 
    j.end_timestamp, 
    j.location
FROM jams j
WHERE j.id = ANY($1::int[])
`

func (q *Queries) GetJamsByIDs(ctx context.Context, ids []int32) ([]Jam, error) {
	rows, err := q.db.Query(ctx, getJamsByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Jam
	for rows.Next() {
		var i Jam
		if err := rows.Scan(
			&i.ID,
			&i.CreatedBy,
			&i.Name,
			&i.StartTimestamp,
			&i.EndTimestamp,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParticipantsByJamIDs = `-- name: GetParticipantsByJamIDs :many
SELECT p.id, p.email, p.jam_id
FROM jam_participants p
WHERE p.jam_id = ANY($1::int[])
`

func (q *Queries) GetParticipantsByJamIDs(ctx context.Context, ids []int32) ([]JamParticipant, error) {
	rows, err := q.db.Query(ctx, getParticipantsByJamIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JamParticipant
	for rows.Next() {
		var i JamParticipant
		if err := rows.Scan(&i.ID, &i.Email, &i.JamID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
